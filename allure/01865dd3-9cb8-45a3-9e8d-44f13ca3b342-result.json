{"name": "test_user_deletes_task", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (260, 453)\n  (Session info: chrome=134.0.6998.88)\nStacktrace:\n#0 0x556c653ada1a <unknown>\n#1 0x556c64e65390 <unknown>\n#2 0x556c64ebdafc <unknown>\n#3 0x556c64ebb95c <unknown>\n#4 0x556c64eb8ff2 <unknown>\n#5 0x556c64eb86f0 <unknown>\n#6 0x556c64eaae0d <unknown>\n#7 0x556c64edcbd2 <unknown>\n#8 0x556c64eaa78a <unknown>\n#9 0x556c64edcd9e <unknown>\n#10 0x556c64f0307b <unknown>\n#11 0x556c64edc9a3 <unknown>\n#12 0x556c64ea860e <unknown>\n#13 0x556c64ea9dd1 <unknown>\n#14 0x556c65373ddb <unknown>\n#15 0x556c65377cbc <unknown>\n#16 0x556c6535b392 <unknown>\n#17 0x556c65378834 <unknown>\n#18 0x556c6533f1ef <unknown>\n#19 0x556c6539c038 <unknown>\n#20 0x556c6539c216 <unknown>\n#21 0x556c653ac896 <unknown>\n#22 0x7f8ae9af81f5 <unknown>", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a689f6f19d626ca5ca4718911ebf5595\")>\n\n    def test_user_deletes_task(driver):\n        username = \"kate11\"\n        password = \"kate11\"\n        title = \"ola4\"\n        description = \"desc4\"\n    \n        with allure.step(\"Navigate to the login page and authenticate\"):\n            user_on_tasks = LoginPage(driver)\n            user_on_tasks.get_login_page()\n            user_on_tasks.authenticated_user(username, password)\n    \n        with allure.step(\"Verify successful login\"):\n            tasks = TasksPage(driver)\n            tasks.get_success_message()\n            assert \"Вы успешно вошли в систему\" in tasks.get_success_message(), \"User is not authorized\"\n    \n        with allure.step(\"Create a new task\"):\n            tasks.click_new_task_btn()\n            assert \"create\" in driver.current_url, \"User is not on the new task creation page\"\n            tasks.enter_new_task_title(title)\n            tasks.enter_new_task_description(description)\n            tasks.submit_task()\n    \n        with allure.step(\"Delete task\"):\n>           tasks.delete_task()\n\ntests/ui/ui_tests/test_manage_tasks.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/ui/pages/tasks_page.py:80: in delete_task\n    self.click_element(self.DELETE_BTN)\ntests/ui/pages/base_page.py:18: in click_element\n    self.find_element(locator, timeout).click()\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5636d46310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x556c6539c216 \\\\u003Cunknown>\\\\n#21 0x556c653ac896 \\\\u003Cunknown>\\\\n#22 0x7f8ae9af81f5 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (260, 453)\nE         (Session info: chrome=134.0.6998.88)\nE       Stacktrace:\nE       #0 0x556c653ada1a <unknown>\nE       #1 0x556c64e65390 <unknown>\nE       #2 0x556c64ebdafc <unknown>\nE       #3 0x556c64ebb95c <unknown>\nE       #4 0x556c64eb8ff2 <unknown>\nE       #5 0x556c64eb86f0 <unknown>\nE       #6 0x556c64eaae0d <unknown>\nE       #7 0x556c64edcbd2 <unknown>\nE       #8 0x556c64eaa78a <unknown>\nE       #9 0x556c64edcd9e <unknown>\nE       #10 0x556c64f0307b <unknown>\nE       #11 0x556c64edc9a3 <unknown>\nE       #12 0x556c64ea860e <unknown>\nE       #13 0x556c64ea9dd1 <unknown>\nE       #14 0x556c65373ddb <unknown>\nE       #15 0x556c65377cbc <unknown>\nE       #16 0x556c6535b392 <unknown>\nE       #17 0x556c65378834 <unknown>\nE       #18 0x556c6533f1ef <unknown>\nE       #19 0x556c6539c038 <unknown>\nE       #20 0x556c6539c216 <unknown>\nE       #21 0x556c653ac896 <unknown>\nE       #22 0x7f8ae9af81f5 <unknown>\n\n/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException"}, "steps": [{"name": "Navigate to the login page and authenticate", "status": "passed", "start": 1742639372276, "stop": 1742639372775}, {"name": "Verify successful login", "status": "passed", "start": 1742639372776, "stop": 1742639372996}, {"name": "Create a new task", "status": "passed", "start": 1742639372996, "stop": 1742639373324}, {"name": "Delete task", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (260, 453)\n  (Session info: chrome=134.0.6998.88)\nStacktrace:\n#0 0x556c653ada1a <unknown>\n#1 0x556c64e65390 <unknown>\n#2 0x556c64ebdafc <unknown>\n#3 0x556c64ebb95c <unknown>\n#4 0x556c64eb8ff2 <unknown>\n#5 0x556c64eb86f0 <unknown>\n#6 0x556c64eaae0d <unknown>\n#7 0x556c64edcbd2 <unknown>\n#8 0x556c64eaa78a <unknown>\n#9 0x556c64edcd9e <unknown>\n#10 0x556c64f0307b <unknown>\n#11 0x556c64edc9a3 <unknown>\n#12 0x556c64ea860e <unknown>\n#13 0x556c64ea9dd1 <unknown>\n#14 0x556c65373ddb <unknown>\n#15 0x556c65377cbc <unknown>\n#16 0x556c6535b392 <unknown>\n#17 0x556c65378834 <unknown>\n#18 0x556c6533f1ef <unknown>\n#19 0x556c6539c038 <unknown>\n#20 0x556c6539c216 <unknown>\n#21 0x556c653ac896 <unknown>\n#22 0x7f8ae9af81f5 <unknown>\n\n", "trace": "  File \"/app/tests/ui/ui_tests/test_manage_tasks.py\", line 174, in test_user_deletes_task\n    tasks.delete_task()\n  File \"/app/tests/ui/pages/tasks_page.py\", line 80, in delete_task\n    self.click_element(self.DELETE_BTN)\n  File \"/app/tests/ui/pages/base_page.py\", line 18, in click_element\n    self.find_element(locator, timeout).click()\n  File \"/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1742639373325, "stop": 1742639374496}], "start": 1742639372276, "stop": 1742639374523, "uuid": "c0169dd5-9c06-4690-bb5b-26825a960189", "historyId": "72052d5021c6ccbb21ecd73c2f5cc247", "testCaseId": "72052d5021c6ccbb21ecd73c2f5cc247", "fullName": "tests.ui.ui_tests.test_manage_tasks#test_user_deletes_task", "labels": [{"name": "parentSuite", "value": "tests.ui.ui_tests"}, {"name": "suite", "value": "test_manage_tasks"}, {"name": "host", "value": "76a4e9a3814a"}, {"name": "thread", "value": "19-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui.ui_tests.test_manage_tasks"}]}